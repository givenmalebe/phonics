// Script to clear fake data from Firebase
const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, writeBatch, doc, query, where } = require('firebase/firestore');

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDMBTooa4lO60-XAgv1hYbOjZk3Z6HPxc8",
  authDomain: "iron-ring-431913-v6.firebaseapp.com",
  projectId: "iron-ring-431913-v6",
  storageBucket: "iron-ring-431913-v6.firebasestorage.app",
  messagingSenderId: "115036740284",
  appId: "1:115036740284:web:bb8c2e0d9cf5243c708eb9",
  measurementId: "G-94QM4S75YP"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function clearFakeData() {
  try {
    console.log('üßπ Starting fake data cleanup...');
    console.log('üîç Targeting fake names and auto-generated data...');
    
    // Define fake data patterns to remove
    const fakeNames = [
      'Sarah Johnson', 'Mike Chen', 'Emily Davis', 'David Wilson', 'Emma Thompson', 
      'Jake Miller', 'Sophia Chen', 'Lucas Rodriguez', 'Ava Johnson', 'Liam Wilson',
      'Noah Brown', 'Olivia Martinez', 'Oliver Lee', 'Charlotte Taylor'
    ];
    
    const fakeEmails = [
      'sarah@phonographix.edu', 'mike@phonographix.edu', 'emily@phonographix.edu',
      'david@phonographix.edu', 'jessica@phonographix.edu', 'robert@phonographix.edu'
    ];

    let totalCleaned = 0;
    
    // Clear fake tutors from users collection
    console.log('üìã Checking users collection for fake tutors...');
    try {
      const tutorsQuery = query(collection(db, 'users'), where('role', '==', 'educator'));
      const tutorsSnapshot = await getDocs(tutorsQuery);
      
      console.log(`Found ${tutorsSnapshot.size} tutors in users collection`);
      
      const batch = writeBatch(db);
      let fakeTutorsFound = 0;
      
      tutorsSnapshot.docs.forEach(docRef => {
        const tutor = docRef.data();
        const tutorName = tutor.displayName || tutor.name || `${tutor.firstName} ${tutor.lastName}`;
        
        // Check if this is fake data
        const isFakeName = fakeNames.some(fakeName => 
          tutorName?.toLowerCase().includes(fakeName.toLowerCase()) ||
          fakeName.toLowerCase().includes(tutorName?.toLowerCase() || '')
        );
        
        const isFakeEmail = fakeEmails.some(fakeEmail => 
          tutor.email?.toLowerCase().includes(fakeEmail.toLowerCase())
        );
        
        // Check for auto-generated patterns
        const hasAutoGeneratedData = (
          tutor.rating && tutor.rating === Math.floor(tutor.rating) && // Whole number ratings are often fake
          tutor.avgImprovement && tutor.avgImprovement > 75 && // Suspiciously high improvement rates
          !tutor.lastLoginAt // No real login activity
        );
        
        if (isFakeName || isFakeEmail || hasAutoGeneratedData) {
          console.log(`‚ùå Marking fake tutor for removal: ${tutorName} (${tutor.email})`);
          batch.delete(docRef.ref);
          fakeTutorsFound++;
        } else {
          console.log(`‚úÖ Keeping real tutor: ${tutorName} (${tutor.email})`);
        }
      });
      
      if (fakeTutorsFound > 0) {
        await batch.commit();
        console.log(`‚úÖ Removed ${fakeTutorsFound} fake tutors from users collection`);
        totalCleaned += fakeTutorsFound;
      } else {
        console.log('‚úÖ No fake tutors found in users collection');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Could not access users collection:', error.message);
    }
    
    // Clear fake learners from learners collection
    console.log('üìã Checking learners collection...');
    try {
      const learnersSnapshot = await getDocs(collection(db, 'learners'));
      
      if (learnersSnapshot.size > 0) {
        console.log(`Found ${learnersSnapshot.size} learners`);
        
        const batch2 = writeBatch(db);
        let fakeLearnersFound = 0;
        
        learnersSnapshot.docs.forEach(docRef => {
          const learner = docRef.data();
          const learnerName = learner.name || learner.displayName;
          
          if (fakeNames.includes(learnerName)) {
            console.log(`‚ùå Removing fake learner: ${learnerName}`);
            batch2.delete(docRef.ref);
            fakeLearnersFound++;
          }
        });
        
        if (fakeLearnersFound > 0) {
          await batch2.commit();
          console.log(`‚úÖ Removed ${fakeLearnersFound} fake learners`);
          totalCleaned += fakeLearnersFound;
        } else {
          console.log('‚úÖ No fake learners found');
        }
      } else {
        console.log('‚úÖ No learners collection found');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Could not access learners collection:', error.message);
    }
    
    // Clear old tutors collection if it exists
    console.log('üìã Checking old tutors collection...');
    try {
      const oldTutorsSnapshot = await getDocs(collection(db, 'tutors'));
      
      if (oldTutorsSnapshot.size > 0) {
        console.log(`Found ${oldTutorsSnapshot.size} documents in old tutors collection`);
        
        const batch3 = writeBatch(db);
        oldTutorsSnapshot.docs.forEach(docRef => {
          const tutor = docRef.data();
          console.log(`‚ùå Removing old tutor document: ${tutor.name || 'Unknown'}`);
          batch3.delete(docRef.ref);
        });
        
        await batch3.commit();
        console.log(`‚úÖ Removed ${oldTutorsSnapshot.size} documents from old tutors collection`);
        totalCleaned += oldTutorsSnapshot.size;
      } else {
        console.log('‚úÖ No old tutors collection found');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Could not access old tutors collection:', error.message);
    }
    
    // Summary
    if (totalCleaned > 0) {
      console.log(`\nüéâ Cleanup completed! Removed ${totalCleaned} fake/old data entries.`);
      console.log('üí° Your app now reflects only real Firebase data!');
    } else {
      console.log('\n‚úÖ Database is already clean! No fake data found.');
    }
    
    // Show remaining real data count
    try {
      const realTutorsQuery = query(collection(db, 'users'), where('role', '==', 'educator'));
      const realTutorsSnapshot = await getDocs(realTutorsQuery);
      console.log(`\nüìä Real tutors remaining: ${realTutorsSnapshot.size}`);
      
      realTutorsSnapshot.docs.forEach(doc => {
        const tutor = doc.data();
        const name = tutor.displayName || `${tutor.firstName} ${tutor.lastName}`;
        console.log(`  ‚úÖ ${name} (${tutor.email})`);
      });
      
    } catch (error) {
      console.log('Could not fetch final count:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Error during cleanup:', error);
    process.exit(1);
  }
  
  process.exit(0);
}

// Run the cleanup
clearFakeData(); 